Description: 'Lab: Deploy VPC and EC2 Instances'

Parameters:
  KeyName:
    Description: EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: My-SysOps-LAB-KP
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  WindowsAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base

  LinuxAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LAB-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LAB-VPC IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 192.168.0.0/24
      Tags:
        - Key: Name
          Value: Public Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 192.168.1.0/24
      Tags:
        - Key: Name
          Value: Public Subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 192.168.2.0/24
      Tags:
        - Key: Name
          Value: Private Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 192.168.3.0/24
      Tags:
        - Key: Name
          Value: Private Subnet-2
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LAB-VPC Public Route Table

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LAB-VPC Private Route Table

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: 
         Fn::GetAtt:
         - EIP
         - AllocationId
      SubnetId:
         Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: LAB-VPC NGW
  EIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  Route:
   Type: AWS::EC2::Route
   DependsOn: NATGateway
   Properties:
      RouteTableId:
         Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
         Ref: NATGateway

  SecurityGroup01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WinServer-SG
      GroupDescription: WinServer-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WinServer-SG

  SecurityGroup02:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LinServer-SG
      GroupDescription: LinServer-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 222
          ToPort: 222
          CidrIp: 192.168.0.0/23
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 192.168.0.0/23
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 192.168.0.0/23
      Tags:
        - Key: Name
          Value: LinServer-SG

  WinInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref WindowsAmiId
      Tags:
        - Key: Name
          Value: Win-Server
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup01
      UserData:
        Fn::Base64: !Sub |
            <Powershell>
            Set-ExecutionPolicy Unrestricted -Force
            New-Item -ItemType directory -Path 'C:\temp'
            Import-Module ServerManager
            install-windowsfeature web-server, web-webserver -IncludeAllSubFeature
            install-windowsfeature web-mgmt-tools
            Set-Location -Path C:\inetpub\wwwroot
            $shell_app = new-object -com shell.application
            (New-Object System.Net.WebClient).DownloadFile("https://raw.githubusercontent.com/ahmadzahoory/awssov2/master/code-m04-01.zip", (Get-Location).Path + "\code-mm04-01.zip")
            $zipfile = $shell_app.Namespace((Get-Location).Path + "\code-mm04-01.zip")
            $destination = $shell_app.Namespace((Get-Location).Path)
            $destination.copyHere($zipfile.items())
            New-WebApplication -Name netapp -PhysicalPath c:\inetpub\wwwroot\ec2-website -Site "Default Web Site" -force
            netsh advfirewall firewall add rule name="ICMP Allow incoming V4 echo request" dir=in action=allow enable=yes protocol=icmpv4:8,any
            function Disable-IEESC
            {
                $AdminKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}”
                Set-ItemProperty -Path $AdminKey -Name “IsInstalled” -Value 0
                $UserKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}”
                Set-ItemProperty -Path $UserKey -Name “IsInstalled” -Value 0
                Stop-Process -Name Explorer
                Write-Host “IE Enhanced Security Configuration (ESC) has been disabled.” -ForegroundColor Green
            }
            Disable-IEESC
            </Powershell>



  LinInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LinuxAmiId
      Tags:
        - Key: Name
          Value: Lin-Server
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup02
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            apt-get -y update
            apt-get install -y apache2
            apt-get install -y unzip
            systemctl restart apache2.service
            cd /var/www/html
            rm index.html
            wget https://raw.githubusercontent.com/ahmadzahoory/awssov2/master/code-m04-01.zip
            unzip code-m04-01.zip
            echo 'lab-password' | passwd ec2-user --stdin
            sed -i 's|[#]*PasswordAuthentication no|PasswordAuthentication yes|g' /etc/ssh/sshd_config
            systemctl restart sshd.service
            
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref WinInstance

Outputs:
  WinServerPublicIP:
    Value: !Ref EIP1
    Description: Win-Server Public IP
    
  LinServerPrivateIP:  
    Value: !GetAtt [LinInstance, PrivateIp] 
    Description: Lin-Server Private IP